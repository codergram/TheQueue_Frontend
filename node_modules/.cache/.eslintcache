[{"/var/www/html/src/index.js":"1","/var/www/html/src/utils.js":"2","/var/www/html/src/App.js":"3","/var/www/html/src/facades/examFacade.js":"4","/var/www/html/src/settingsBackend.js":"5","/var/www/html/src/settings.js":"6","/var/www/html/src/components/Header.component.jsx":"7","/var/www/html/src/components/Logo.component.jsx":"8","/var/www/html/src/components/Semester.component.jsx":"9","/var/www/html/src/components/Uddannelse.component.jsx":"10","/var/www/html/src/components/Home.component.jsx":"11","/var/www/html/src/components/Login.component.jsx":"12","/var/www/html/src/components/NoMatch.component.jsx":"13","/var/www/html/src/components/Queue.component.jsx":"14","/var/www/html/src/components/Footer.component.jsx":"15"},{"size":509,"mtime":1651178647838,"results":"16","hashOfConfig":"17"},{"size":3492,"mtime":1651178647842,"results":"18","hashOfConfig":"17"},{"size":4749,"mtime":1651178647830,"results":"19","hashOfConfig":"17"},{"size":2075,"mtime":1652880278813,"results":"20","hashOfConfig":"17"},{"size":85,"mtime":1652880205177,"results":"21","hashOfConfig":"17"},{"size":69,"mtime":1652880213097,"results":"22","hashOfConfig":"17"},{"size":651,"mtime":1651178647830,"results":"23","hashOfConfig":"17"},{"size":192,"mtime":1651178647830,"results":"24","hashOfConfig":"17"},{"size":1359,"mtime":1651178647830,"results":"25","hashOfConfig":"17"},{"size":1222,"mtime":1652880431880,"results":"26","hashOfConfig":"17"},{"size":1005,"mtime":1652880340873,"results":"27","hashOfConfig":"17"},{"size":2268,"mtime":1651178647830,"results":"28","hashOfConfig":"17"},{"size":407,"mtime":1651178647830,"results":"29","hashOfConfig":"17"},{"size":26586,"mtime":1651178647830,"results":"30","hashOfConfig":"17"},{"size":1059,"mtime":1652865292366,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jqqrv8",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"/var/www/html/src/index.js",[],"/var/www/html/src/utils.js",[],"/var/www/html/src/App.js",["68"],"import React, { useState, useEffect } from \"react\";\nimport {\n  // BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link,\n  // NavLink,\n  // Redirect,\n  // useLocation,\n  // Prompt,\n  // useRouteMatch,\n  // useParams,\n  useHistory,\n} from \"react-router-dom\";\nimport Logo from \"./components/Logo.component\";\nimport Header from \"./components/Header.component\";\nimport Uddannelse from \"./components/Uddannelse.component\";\nimport Semester from \"./components/Semester.component\";\nimport Queue from \"./components/Queue.component\";\n\nimport Home from \"./components/Home.component\";\n\n\nimport NoMatch from \"./components/NoMatch.component\";\nimport Login from \"./components/Login.component\";\n// import PrivateRoute from \"./components/PrivateRoute.component\";\nimport \"./App.css\";\n\nfunction App(props) {\n  const defaultList = [];\n  const { facade, utils } = props;\n  const [schoolData, setSchoolData] = useState([...defaultList]);\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [displayError, setDisplayError] = useState(\"\");\n  let history = useHistory();\n\n  useEffect(() => {\n    facade.getData((data) => {\n      console.log(data);\n      setSchoolData([...data]);\n    });\n  }, []);\n\n  const setLoginStatus = (status, pageToGoTo) => {\n    // console.log(pageToGoTo)\n    //Redurect to home if logut is pressed ==> pageToGoTo === \"undefined\"\n    if (typeof pageToGoTo === \"undefined\") {\n      pageToGoTo = \"/\";\n      // console.log(pageToGoTo)\n    }\n    setIsLoggedIn(status);\n    history.push(pageToGoTo);\n  };\n\n  const login = (user, pass, from) => {\n    /*TODO*/\n    utils\n      .login(user, pass)\n      .then((res) => {\n        setLoginStatus(true, from);\n        //setIsLoggedIn(true);\n        setDisplayError(\"\");\n      })\n      .catch((error) => {\n        error.fullError.then((errorMsg) => {\n          console.log(errorMsg);\n          setDisplayError(\n            // \"Error: Status: \" +\n            //   errorMsg.code +\n            //   \" -  Message: \" +\n            errorMsg.message\n          );\n        });\n      });\n  };\n\n  const clearError = () => {\n    setDisplayError(\"\");\n  };\n\n  return (\n    <div className=\"container\">\n      {/* {console.log(schoolData)} */}\n      {/* {console.log(props.bookFacade.getBooks)} */}\n      <Logo />\n      <Header\n        loginMsg={isLoggedIn ? \"Logout\" : \"Login\"}\n        isLoggedIn={isLoggedIn}\n      />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Home\n            utils={utils}\n            facade={facade}\n            isLoggedIn={isLoggedIn}\n            schoolData={schoolData}\n          />\n        </Route>\n\n        {/* Home Page Option */}\n        {schoolData.map((school) => (\n          <Route exact path={`/` + school.name} key={school.id}>\n            <Uddannelse\n              uddannelse={schoolData.find((s) => s.name === school.name)}\n              schoolName={school.name}\n              facade={facade}\n            />\n          </Route>\n        ))}\n\n        {/* Udd Page Option */}\n        {schoolData.map((school) =>\n          school.educations.map((udd) => (\n            // console.log(`/` + school.name + `/` + udd.name)\n            <Route exact path={`/` + school.name + `/` + udd.name} key={udd.id}>\n              <Semester\n                uddannelse={schoolData.find((s) => s.name === school.name)}\n                schoolName={school.name}\n                uddName={udd.name}\n                facade={facade}\n              />\n            </Route>\n          ))\n        )}\n\n        {/* Udd Page Option */}\n        {schoolData.map((school) =>\n          school.educations.map((udd) =>\n            udd.semesters.map((semester) => (\n              // console.log(`/` + school.name + `/` + udd.name + `/` + semester.name)\n              <Route\n                exact\n                path={`/` + school.name + `/` + udd.name + `/` + semester.name}\n                key={semester.id}\n              >\n                <Queue\n                  schoolName={school.name}\n                  schoolId={school.id}\n                  uddName={udd.name}\n                  uddId={udd.id}\n                  semesterName={semester.name}\n                  semesterId={semester.id}\n                  facade={facade}\n                  isLoggedIn={isLoggedIn}\n                />\n              </Route>\n            ))\n          )\n        )}\n\n        <Route path=\"/login-out\">\n          <Login\n            loginMsg={isLoggedIn ? \"Logout\" : \"Login\"}\n            isLoggedIn={isLoggedIn}\n            setLoginStatus={setLoginStatus}\n            utils={utils}\n            login={login}\n            displayError={displayError}\n            clearError={clearError}\n          />\n        </Route>\n\n        <Route path=\"*\">\n          <NoMatch />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","/var/www/html/src/facades/examFacade.js",[],"/var/www/html/src/settingsBackend.js",[],"/var/www/html/src/settings.js",[],"/var/www/html/src/components/Header.component.jsx",[],"/var/www/html/src/components/Logo.component.jsx",[],"/var/www/html/src/components/Semester.component.jsx",[],"/var/www/html/src/components/Uddannelse.component.jsx",["69"],"import React from \"react\";\nimport {\n  // BrowserRouter as Router,\n  // Switch,\n  // Route,\n  Link,\n  //   NavLink,\n  // Redirect,\n  // useLocation,\n  // Prompt,\n  // useRouteMatch,\n  // useParams,\n  // useHistory,\n} from \"react-router-dom\";\nimport \"../style/uddannelsesStyle.css\";\n\nexport default function Uddannelse(props) {\n  const { uddannelse, schoolName, facade } = props;\n  // const [uddannelser] = useState([...uddannelse.uddannelser]);\n  // const [school] = useState(schoolName);\n\n  return (\n    <div>\n      {/* {console.log(uddannelse)} */}\n      {/* {console.log(uddannelse.uddannelser)} */}\n      {/* {console.log(school)} */}\n      {/* {JSON.stringify(uddannelser)} */}\n\n      <div className=\"row\">\n        {uddannelse.educations.map((udd) => (\n          <div className=\"col-md-4 theMargin\" key={udd.id}>\n            <div className=\"\">\n              <Link\n                className=\"item-box the-box underline\"\n                to={`/` + schoolName + `/` + udd.name}\n              >\n                <h1 className=\"text-center udd\" style={{ color: \"black\" }}>\n                  {udd.name}\n                </h1>\n              </Link>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","/var/www/html/src/components/Home.component.jsx",["70"],"import React from \"react\";\nimport {\n  // BrowserRouter as Router,\n  // Switch,\n  // Route,\n  Link,\n  // NavLink,\n  // Redirect,\n  // useLocation,\n  // Prompt,\n  // useRouteMatch,\n  // useParams,\n  // useHistory,\n} from \"react-router-dom\";\nimport \"../style/skoleStyle.css\";\n\nexport default function Home(props) {\n  const { facade, schoolData } = props;\n\n  return (\n    <div>\n      {/* {console.log(props.isLoggedIn)} */}\n      {console.log(schoolData)}\n      <div className=\"row\">\n        {schoolData.map((school) => (\n          <div className=\"col-md-4 theMargin\" key={school.id}>\n            <div className=\"item-box the-box\">\n              <Link className=\"\" to={`/` + school.name}>\n                <img\n                  className=\"img-fluid the-image imgSchool\"\n                  src={school.img}\n                  alt={school.name}\n                />\n              </Link>\n            </div>\n          </div>\n        ))}\n      </div>\n      <br></br>\n      <br></br>\n      <br></br>\n    </div>\n  );\n}\n","/var/www/html/src/components/Login.component.jsx",["71"],"import React, { useState, useEffect } from \"react\";\nimport {\n  // BrowserRouter as Router,\n  // Switch,\n  // Route,\n  // Link,\n  // NavLink,\n  // Redirect,\n  useLocation,\n  // Prompt,\n  // useRouteMatch,\n  // useParams,\n  // useHistory,\n} from \"react-router-dom\";\n\nexport default function Login(props) {\n  const {\n    loginMsg,\n    isLoggedIn,\n    setLoginStatus,\n    utils,\n    login,\n    displayError,\n    clearError,\n  } = props;\n\n  const init = { username: \"\", password: \"\" };\n  const [loginCredentials, setLoginCredentials] = useState(init);\n  // const [error, setError] = useState(false);\n\n  const { state } = useLocation();\n  //Vi sætter den side vi gerne vil til, selv om vi ikke er logget ind\n  //Logout sætter from til \"undefined\"\n  const from = state ? state.from : \"/\";\n\n  const performLogin = (evt) => {\n    evt.preventDefault();\n    setTimeout(function () {\n      clearError();\n    }, 2500);\n    login(loginCredentials.username, loginCredentials.password, from);\n  };\n\n  const onChange = (evt) => {\n    setLoginCredentials({\n      ...loginCredentials,\n      [evt.target.id]: evt.target.value,\n    });\n  };\n\n  // Logger selv ud når vi trykker på logout\n  useEffect(() => {\n    if (isLoggedIn) {\n      utils.logout();\n      setLoginStatus(!isLoggedIn);\n    }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      {/* {console.log(utils)} */}\n      <div className=\"row\">\n        <div className=\"col-sm-2 text-center\"></div>\n        <div className=\"col-sm-8 text-center\">\n        <h2>Underviser Login</h2>\n          <form onChange={onChange}>\n            <input className=\"form-control\" placeholder=\"Skriv email...\" type=\"text\" id=\"username\" />{\" \"}\n            <input className=\"form-control\" placeholder=\"Skriv kodeord...\" type=\"password\" id=\"password\" />{\" \"}\n            <p></p>\n            <button className=\"btn btn-primary\" onClick={performLogin}>{loginMsg}</button>\n            {console.log(displayError)}\n            {displayError.length > 0 ? (\n              <p className=\"alert alert-danger\" style={{ width: \"415px\" }}>\n                {displayError}\n              </p>\n            ) : (\n              \"\"\n            )}\n          </form>\n        </div>\n        <div className=\"col-sm-2 text-center\"></div>\n      </div>\n    </div>\n  );\n}\n","/var/www/html/src/components/NoMatch.component.jsx",[],"/var/www/html/src/components/Queue.component.jsx",["72","73","74","75"],"import React, { useState, useEffect } from \"react\";\nimport CreateQModal from \"react-responsive-modal\";\nimport ShowQModal from \"react-responsive-modal\";\nimport \"../style/uddannelsesStyle.css\";\nimport picture from \"../images/tutor.jpg\";\nimport \"react-responsive-modal/styles.css\";\nimport \"../style/modal.css\";\n\nexport default function Queue(props) {\n  const {\n    // semesterName,\n    semesterId,\n    // schoolName,\n    // schoolId,\n    // uddName,\n    // uddId,\n    facade,\n    isLoggedIn,\n  } = props;\n\n  const question = {\n    id: -1,\n    description: \"\",\n    password: \"\",\n    semesterId: semesterId,\n    student: {\n      name: \"\",\n      email: \"\",\n    },\n    studentLink: \"\",\n    topic: \"\",\n    timestamp: \"\",\n    // teacher: {\n    //   teacherName: \"\",\n    //   zoom_url: \"\",\n    // },\n    answer: {\n      id: -1,\n      teacher: {\n        id: -1,\n        teacherName: \"\",\n        email: \"\",\n        password: \"\",\n        zoom_url: \"\",\n      },\n      answer: \"\",\n      teacherLink: \"\",\n    },\n  };\n\n  const list = [];\n\n  const [q, setQ] = useState({ ...question });\n  const [qList, setQlist] = useState([...list]);\n  const [qListToSearch, setQlistToSearch] = useState([...list]);\n  const [qToShow, setQtoShow] = useState({ ...question });\n  const [oldQ, setOldQ] = useState(false);\n  const [opdateList, setOpdateList] = useState(false);\n  const [teacherEmail, setTeacherEmail] = useState(\"\");\n  // const [opdateTheList, setOpdateTheList] = useState(true);\n  //Modals\n  const [createQ, setCreateQ] = useState(false);\n  const [showQ, setShowQ] = useState(false);\n  // let answeredQuestions = { answeredQuestions: false };\n\n  useEffect(() => {\n    facade.getQuestions(semesterId, (data) => {\n      console.log(data);\n      const questions = data.filter((quest) => quest.answer.id === -1);\n      setQlist([...questions]);\n      setQlistToSearch([...questions]);\n    });\n\n    if (isLoggedIn) {\n      setTeacherEmail(localStorage.getItem(\"teacherEmail\"));\n    }\n\n    // const interval = setInterval(() => {\n    //   console.log(oldQ);\n    //   console.log(\"opadate\");\n    //   facade.getQuestions(semesterId, (data) => {\n    //     console.log(data);\n    //     if (oldQ === true) {\n    //       const alreadyAnsweredQuestions = data.filter(\n    //         (quest) => quest.answer.id !== -1\n    //       );\n    //       setQlist([...alreadyAnsweredQuestions.reverse()]);\n    //       setQlistToSearch([...alreadyAnsweredQuestions.reverse()]);\n    //     } else {\n    //       const notYetAnsweredQuestions = data.filter(\n    //         (quest) => quest.answer.id === -1\n    //       );\n    //       setQlist([...notYetAnsweredQuestions]);\n    //       setQlistToSearch([...notYetAnsweredQuestions]);\n    //     }\n    //   });\n    // }, 5000);\n\n    // return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    facade.getQuestions(semesterId, (data) => {\n      console.log(data);\n      if (oldQ === true) {\n        const alreadyAnsweredQuestions = data.filter(\n          (quest) => quest.answer.id !== -1\n        );\n        setQlist([...alreadyAnsweredQuestions.reverse()]);\n        setQlistToSearch([...alreadyAnsweredQuestions.reverse()]);\n      } else {\n        const notYetAnsweredQuestions = data.filter(\n          (quest) => quest.answer.id === -1\n        );\n        setQlist([...notYetAnsweredQuestions]);\n        setQlistToSearch([...notYetAnsweredQuestions]);\n      }\n    });\n\n    const interval = setInterval(() => {\n      console.log(oldQ);\n      console.log(\"opadate\");\n      facade.getQuestions(semesterId, (data) => {\n        console.log(data);\n        if (oldQ === true) {\n          const alreadyAnsweredQuestions = data.filter(\n            (quest) => quest.answer.id !== -1\n          );\n          setQlist([...alreadyAnsweredQuestions.reverse()]);\n          setQlistToSearch([...alreadyAnsweredQuestions.reverse()]);\n        } else {\n          const notYetAnsweredQuestions = data.filter(\n            (quest) => quest.answer.id === -1\n          );\n          setQlist([...notYetAnsweredQuestions]);\n          setQlistToSearch([...notYetAnsweredQuestions]);\n        }\n      });\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [oldQ, opdateList]);\n\n  //Open Modals\n  const openCreateQ = () => {\n    setQ({ ...question });\n    setCreateQ(true);\n  };\n\n  const openShowQ = () => {\n    setShowQ(true);\n  };\n\n  //Close Modals\n  const closeCreateQ = () => {\n    setCreateQ(false);\n  };\n\n  const closeShowQ = () => {\n    setQ({ ...question });\n    setQtoShow({ ...question });\n    setShowQ(false);\n  };\n\n  //After Modal open\n  // function afterOpenModal() {\n  //   // references are now sync'd and can be accessed.\n  // }\n\n  /**\n   * Create Q Modal\n   */\n  const handleChangeCreateQ = (event) => {\n    //console.log(event.target.value);\n    const target = event.target;\n    //console.log(target);\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    //console.log(\"Value: \" + target.type === \"checkbox\" ? target.checked : target.value);\n    const name = target.name;\n    console.log(\"Name: \" + name);\n    if (name === \"name\" || name === \"email\") {\n      console.log(name);\n      q.student[name] = value;\n      setQ({ ...q });\n      //setQ({ ...q, [name]: value });\n    }\n    // else if(name === \"teacherName\" || name === \"zoom_url\"){\n    //     q.teacher[name] = value;\n    //     setQ({ ...q});\n    // }\n    else {\n      q[name] = value;\n      setQ({ ...q, [name]: value });\n    }\n    // q[name] = value;\n    // setQ({ ...q, [name]: value });\n    console.log(q);\n  };\n\n  const handleSubmitCreateQ = (event) => {\n    event.preventDefault();\n\n    const theQuestionToSend = {\n      description: q.description,\n      password: q.password,\n      semesterId: q.semesterId,\n      student: {\n        email: q.student.email,\n        name: q.student.name,\n      },\n      studentLink: q.studentLink,\n      topic: q.topic,\n    };\n\n    facade.addQuestion(theQuestionToSend, (data) => {\n      console.log(data);\n      setQ({ ...question });\n      setOpdateList(!opdateList); //Bruges til at opdatere liste\n    });\n    closeCreateQ();\n  };\n\n  /**\n   * Show Q Modal\n   */\n  const handleShowQ = (event) => {\n    // console.log(event.currentTarget);\n    // console.log(event.target);\n    // const target = event.currentTarget;\n    // console.log(target);\n    const id = parseInt(event.currentTarget.id);\n    console.log(id);\n    const questionToShow = qList.find((quest) => quest.id === id);\n    console.log(questionToShow);\n    const theQuestionToShow = {\n      id: questionToShow.id,\n      description: questionToShow.description,\n      password: questionToShow.password,\n      semesterId: questionToShow.semesterId,\n      student: {\n        email: questionToShow.student.email,\n        name: questionToShow.student.name,\n      },\n      studentLink: questionToShow.studentLink,\n      topic: questionToShow.topic,\n      timestamp: questionToShow.timestamp,\n      answer: {\n        id: questionToShow.answer.id,\n        teacher: {\n          id: questionToShow.answer.teacher.id,\n          teacherName:\n            questionToShow.answer.teacher.teacherName === null\n              ? \"\"\n              : questionToShow.answer.teacher.teacherName,\n          email:\n            questionToShow.answer.teacher.email === null\n              ? \"\"\n              : questionToShow.answer.teacher.email,\n          password:\n            questionToShow.answer.teacher.password === null\n              ? \"\"\n              : questionToShow.answer.teacher.password,\n          zoom_url:\n            questionToShow.answer.teacher.zoom_url === null\n              ? \"\"\n              : questionToShow.answer.teacher.zoom_url,\n        },\n        answer:\n          questionToShow.answer.answer === null\n            ? \"\"\n            : questionToShow.answer.answer,\n        teacherLink:\n          questionToShow.answer.teacherLink === null\n            ? \"\"\n            : questionToShow.answer.teacherLink,\n      },\n    };\n    //console.log(questionToShow);\n    setQtoShow({ ...theQuestionToShow });\n    setQ({ ...theQuestionToShow }); //Ellers lukker modal når svar bliver mere end \"\"\n    //console.log(q);\n    //console.log(qToShow);\n    openShowQ();\n  };\n\n  const handleChangeShowQ = (event) => {\n    //console.log(event.target.value);\n    const target = event.target;\n    //console.log(target);\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    //console.log(\"Value: \" + target.type === \"checkbox\" ? target.checked : target.value);\n    const name = target.name;\n    console.log(\"Name: \" + name);\n    // if (name === \"name\" || name === \"email\") {\n    //   console.log(name);\n    //   q.student[name] = value;\n    //   setQ({ ...q, [name]: value });\n    // }\n    if (\n      name === \"teacherName\" ||\n      name === \"zoom_url\" ||\n      name === \"email\" ||\n      name === \"password\"\n    ) {\n      q.answer.teacher[name] = value;\n      setQ({ ...q });\n    } else if (name === \"answer\") {\n      q.answer.answer = value;\n      setQ({ ...q });\n    } else {\n      q.answer[name] = value;\n      setQ({ ...q, [name]: value });\n    }\n    // q[name] = value;\n    // setQ({ ...q, [name]: value });\n    //console.log(q);\n    console.log(qToShow);\n  };\n\n  const handleSubmitShowQ = (event) => {\n    event.preventDefault();\n    const answerToSend = {\n      id: q.id,\n      answer: {\n        teacher: {\n          email: teacherEmail,\n        },\n        answer: q.answer.answer,\n        teacherLink: q.answer.teacherLink,\n      },\n    };\n    console.log(answerToSend);\n    facade.addAnswer(answerToSend, (data) => {\n      console.log(data);\n      setQ({ ...question });\n      setQtoShow({ ...question });\n      setOpdateList(!opdateList); //Bruges til at opdatere liste\n    });\n\n    closeShowQ();\n  };\n\n  const search = (event) => {\n    //console.log(event.target.value);\n    const searchField = event.target.value.toLowerCase();\n    //console.log(\"Søger...\");\n    if (searchField.length > 0) {\n      //console.log(\"Der står noget\");\n      const newList = qListToSearch.filter(\n        (q) =>\n          q.answer.answer.toLowerCase().includes(searchField) ||\n          q.topic.toLowerCase().includes(searchField) ||\n          q.description.toLowerCase().includes(searchField)\n      );\n      //console.log(newList);\n      setQlist([...newList]);\n    } else {\n      //console.log(\"Der står IKKE noget\");\n      setOpdateList(!opdateList); //Bruges til at opdatere liste\n    }\n  };\n\n  return (\n    <div>\n      {/* {console.log(schoolName)} */}\n      {/* {console.log(schoolId)} */}\n      {/* {console.log(uddName)} */}\n      {/* {console.log(uddId)} */}\n      {/* {console.log(semesterName)} */}\n      {console.log(semesterId)}\n      {/* {console.log(qList)} */}\n      {/* {console.log(oldQ)} */}\n      {/* {console.log(\n        new Date(question.timestamp).getUTCDate() +\n          \"-\" +\n          new Date(question.timestamp).getUTCMonth() +\n          \"-\" +\n          new Date(question.timestamp).getUTCFullYear()\n      )} */}\n      {/* {console.log(new Date(question.timestamp).toLocaleDateString())} */}\n      {/* {console.log(new Date(question.timestamp).toTimeString().slice(0, 5))} */}\n      {/* <img className=\"img-fluid\" src=\"images/tutor.png\" alt=\"tutor\" /> */}\n      <div className=\"row\">\n        <div className=\"col-md-1\"></div>\n        <div className=\"col-md-10\">\n          <h1 className=\"text-center\">Hvad kan jeg hjælpe dig med?</h1>\n          <div className=\"text-center\">\n            <img className=\"img-fluid\" src={picture} alt=\"tutor\" width=\"25%\" />\n          </div>\n        </div>\n        <div className=\"col-md-1\"></div>\n      </div>\n\n      {/* Opret spørgsmål */}\n      <div className=\"row\">\n        <div className=\"col-md-1\"></div>\n        <div className=\"col-md-10 text-center\">\n          <button className=\"btn btn-primary btn-sm\" onClick={openCreateQ}>\n            Opret et Spørgmål\n          </button>\n          <p id=\"errorMsg\" style={{ color: \"red\" }}></p>\n        </div>\n        <div className=\"col-md-1\"></div>\n      </div>\n      <br></br>\n\n      {/* Søg i gamle besvarelser */}\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <form>\n            <div className=\"form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"findOldQ\"\n                onChange={() => setOldQ(!oldQ)}\n              />\n              <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">\n                Tidligere Spørgsmål\n              </label>\n            </div>\n            {oldQ === false ? (\n              \"\"\n            ) : (\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  className=\"form-control w-50\"\n                  id=\"find\"\n                  name=\"find\"\n                  placeholder=\"Søg i emner og spørgsmål...\"\n                  size=\"10px\"\n                  onChange={search}\n                />\n              </div>\n            )}\n          </form>\n        </div>\n      </div>\n\n      {/* Tabel  */}\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                {oldQ === false ? <th scope=\"col\">Kø</th> : \"\"}\n                <th scope=\"col\">Navn</th>\n                <th scope=\"col\">Emne</th>\n                <th scope=\"col\">Dato</th>\n                <th scope=\"col\">Spørgsmål</th>\n              </tr>\n            </thead>\n            <tbody>\n              {qList.map((next, index) => (\n                <tr\n                  style={{ cursor: \"pointer\" }}\n                  key={next.id}\n                  id={next.id}\n                  onClick={handleShowQ}\n                >\n                  {oldQ === false ? <th scope=\"row\">{index + 1}</th> : \"\"}\n                  <td>{next.student.name}</td>\n                  <td>{next.topic}</td>\n                  <td>\n                    {new Date(next.timestamp.replace(\" \", \"T\"))\n                      .toLocaleDateString()\n                      .replaceAll(\".\", \"-\") +\n                      \" \" +\n                      new Date(next.timestamp.replace(\" \", \"T\"))\n                        .toTimeString()\n                        .slice(0, 5)}\n                  </td>\n                  {/* <td>{next.status === false ? \"Afenter\" : \"Besvaret\"}</td> */}\n                  <td style={{ maxWidth: \"300px\" }}>\n                    {next.description.length > 80\n                      ? next.description.slice(0, 79) + \"...\"\n                      : next.description}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Create Q */}\n      <CreateQModal\n        open={createQ}\n        onClose={closeCreateQ}\n        center\n        classNames={{\n          overlay: \"customOverlay\",\n          modal: \"customModal\",\n        }}\n        // isOpen={createQ}\n        // onAfterOpen={afterOpenModal}\n        // onRequestClose={closeCreateQ}\n        // style={bigModalStyle}\n        // contentLabel=\"Create Q\"\n      >\n        <h3 className=\"text-center\">Opret Spørgsmål</h3>\n        <hr />\n        <form onChange={handleChangeCreateQ} onSubmit={handleSubmitCreateQ}>\n          {/* <div className=\"form-group\">\n            <label htmlFor=\"name\" className=\"col-form-label\">\n              Navn:\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"Skriv dit navn...\"\n              defaultValue={q.student.name}\n              required\n            />\n          </div> */}\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\" className=\"col-form-label\">\n              Email:\n            </label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"Skriv din skolemail...\"\n              defaultValue={q.student.email}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"topic\" className=\"col-form-label\">\n              Emne:\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"topic\"\n              name=\"topic\"\n              placeholder=\"Skriv et emne...\"\n              defaultValue={q.topic}\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"question\" className=\"col-form-label\">\n              Spørgmål:\n            </label>\n            <textarea\n              className=\"form-control\"\n              id=\"description\"\n              name=\"description\"\n              placeholder=\"Beskriv problemet...\"\n              defaultValue={q.description}\n              rows=\"5\"\n              required\n            ></textarea>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"link\" className=\"col-form-label\">\n              Ekstern Link:\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"studentLink\"\n              name=\"studentLink\"\n              placeholder=\"Indsæt evt et link...\"\n              defaultValue={q.studentLink}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\" className=\"col-form-label\">\n              {/* Sikkerhedskode: */}\n            </label>\n            <input\n              type=\"hidden\"\n              className=\"form-control\"\n              id=\"password\"\n              name=\"password\"\n              placeholder=\"Skriv et kodeord...\"\n              // defaultValue={q.password}\n              defaultValue=\"Kodeord1234\"\n              required\n            />\n          </div>\n\n          {/* <input type=\"hidden\" id=\"id\" /> */}\n\n          <hr />\n\n          <div className=\"form-group\">\n            <div className=\"row\">\n              <div className=\"col-auto mr-auto\"></div>\n              <div className=\"col-auto\">\n                <button\n                  style={{ width: \"65px\" }}\n                  type=\"button\"\n                  className=\"btn btn-dark\"\n                  onClick={closeCreateQ}\n                >\n                  Luk\n                </button>\n                <button\n                  style={{ width: \"65px\" }}\n                  type=\"submit\"\n                  style={{ marginLeft: 5 }}\n                  className=\"btn btn-primary\"\n                >\n                  Opret\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </CreateQModal>\n\n      {/* Show Q */}\n      <ShowQModal\n        open={showQ}\n        onClose={closeShowQ}\n        center\n        classNames={{\n          overlay: \"customOverlay\",\n          modal: \"customModal\",\n        }}\n\n        // isOpen={showQ}\n        // onAfterOpen={afterOpenModal}\n        // onRequestClose={closeShowQ}\n        // style={bigModalStyle}\n        // contentLabel=\"Show Q\"\n      >\n        <h3 className=\"text-center\">Spørgsmålet</h3>\n\n        <hr />\n\n        <div>\n          <h4 className=\"text-center\">{qToShow.topic}</h4>\n        </div>\n        <div>\n          <p>{qToShow.description}</p>\n        </div>\n        <br></br>\n        <div>\n          <a\n            href={qToShow.studentLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <button className=\"btn btn-primary btn-sm\">\n              Ekstern Link fra Elev\n            </button>\n          </a>\n        </div>\n        <br />\n        <hr />\n\n        {qToShow.answer.id === -1 ? (\n          isLoggedIn === false ? (\n            <div>\n              <div>\n                <h4 className=\"text-center\">Afventer besvarelse....</h4>\n              </div>\n              <br />\n              <br />\n              <br />\n              <br />\n              <br />\n              <br />\n              <br />\n              <hr />\n              <div className=\"form-group\">\n                <div className=\"row\">\n                  <div className=\"col-auto mr-auto\"></div>\n                  <div className=\"col-auto\">\n                    <button\n                      style={{ width: \"65px\" }}\n                      type=\"button\"\n                      className=\"btn btn-dark\"\n                      onClick={closeShowQ}\n                    >\n                      Luk\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <div>\n                <h4 className=\"text-center\">Besvar spørgmålet</h4>\n              </div>\n              <form onChange={handleChangeShowQ} onSubmit={handleSubmitShowQ}>\n                {/* <div className=\"form-group\">\n                  <label htmlFor=\"name\" className=\"col-form-label\">\n                    Navn:\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"teacherName\"\n                    name=\"teacherName\"\n                    placeholder=\"Skriv dit navn...\"\n                    defaultValue={qToShow.answer.teacher.teacherName}\n                    required\n                  />\n                </div> */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\" className=\"col-form-label\">\n                    Email:\n                  </label>\n                  <input\n                    readOnly\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"email\"\n                    name=\"email\"\n                    placeholder=\"Skriv din email...\"\n                    defaultValue={teacherEmail}\n                    required\n                  />\n                </div>\n                {/* <div className=\"form-group\">\n                  <label htmlFor=\"name\" className=\"col-form-label\">\n                    Kodeord:\n                  </label>\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    id=\"password\"\n                    name=\"password\"\n                    placeholder=\"Skriv dit kodeord...\"\n                    defaultValue={qToShow.answer.teacher.password}\n                    required\n                  />\n                </div> */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"question\" className=\"col-form-label\">\n                    Svar:\n                  </label>\n                  <textarea\n                    className=\"form-control\"\n                    id=\"answer\"\n                    name=\"answer\"\n                    placeholder=\"Skriv dit svar her...\"\n                    defaultValue={qToShow.answer.answer}\n                    rows=\"5\"\n                    required\n                  ></textarea>\n                </div>\n                {/* <div className=\"form-group\">\n                  <label htmlFor=\"link\" className=\"col-form-label\">\n                    Zoom:\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"zoom_url\"\n                    name=\"zoom_url\"\n                    placeholder=\"Indsæt Zoom link...\"\n                    defaultValue={qToShow.answer.teacher.zoom_url}\n                  />\n                </div> */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"link\" className=\"col-form-label\">\n                    Ekstern Link:\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"teacherLink\"\n                    name=\"teacherLink\"\n                    placeholder=\"Indsæt link...\"\n                    defaultValue={qToShow.answer.teacherLink}\n                  />\n                </div>\n                <br />\n                <hr />\n                <div className=\"form-group\">\n                  <div className=\"row\">\n                    <div className=\"col-auto mr-auto\"></div>\n                    <div className=\"col-auto\">\n                      <button\n                        style={{ width: \"65px\" }}\n                        type=\"button\"\n                        className=\"btn btn-dark\"\n                        onClick={closeShowQ}\n                      >\n                        Luk\n                      </button>\n                      <button\n                        style={{ width: \"65px\" }}\n                        id={qToShow.id}\n                        //   onClick={}\n                        style={{ marginLeft: 5 }}\n                        className=\"btn btn-primary\"\n                      >\n                        Besvar\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n          )\n        ) : (\n          <div>\n            <div>\n              <h4 className=\"text-center\">\n                Besvaret af: {qToShow.answer.teacher.teacherName}\n              </h4>\n            </div>\n            <div>\n              <p>{qToShow.answer.answer}</p>\n            </div>\n\n            <br></br>\n            <div>\n              <a\n                href={qToShow.answer.teacher.zoom_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <button className=\"btn btn-primary btn-sm\">Zoom</button>\n              </a>\n            </div>\n            <br></br>\n            <div>\n              <a\n                href={qToShow.answer.teacherLink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <button className=\"btn btn-primary btn-sm\">\n                  Ekstern Link fra Tutor\n                </button>\n              </a>\n            </div>\n            <br />\n            <hr />\n            <div className=\"form-group\">\n              <div className=\"row\">\n                <div className=\"col-auto mr-auto\"></div>\n                <div className=\"col-auto\">\n                  <button\n                    style={{ width: \"65px\" }}\n                    type=\"button\"\n                    className=\"btn btn-dark\"\n                    onClick={closeShowQ}\n                  >\n                    Luk\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </ShowQModal>\n    </div>\n  );\n}\n","/var/www/html/src/components/Footer.component.jsx",["76","77"],"import React, { useState, useEffect } from \"react\";\n\nexport default function Footer(props) {\n  const covidDefault = {\n    dailyInfected: 0,\n    dailyRecovered: 0,\n    intensive: 0,\n    dailyDead: 0,\n  };\n  const { facade } = props;\n  const [proxyData, setProxyData] = useState({...covidDefault});\n\n  useEffect(() => {\n    facade.getProxy((data) => {\n      console.log(data);\n      setProxyData({ ...data });\n    });\n  }, []);\n\n  return (\n    <div\n      className=\"fixed-bottom\"\n      style={{ backgroundColor: \"rgba(255,255,255, 0.9)\" }}\n    >\n      <div className=\"container\">\n        <div className=\"row\">\n          {/* <div className=\"col-4 col-md-4 text-center\"></div> */}\n          <div className=\"col-12 col-md-12 text-center\">\n            <h6 style={{ fontSize: \"80%\" }}>Made with love by Codergram &#10084;</h6>\n          </div>\n          {/* <div className=\"col-4 col-md-4 text-center\"></div> */}\n        </div>\n\n        {/* <br style={{lineHeight: \"10%\"}}/> */}\n\n        {/* <div style={{ height: \"3px\" }}></div> */}\n\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"78","severity":1,"message":"79","line":43,"column":6,"nodeType":"80","endLine":43,"endColumn":8,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":18,"column":35,"nodeType":"84","messageId":"85","endLine":18,"endColumn":41},{"ruleId":"82","severity":1,"message":"83","line":18,"column":11,"nodeType":"84","messageId":"85","endLine":18,"endColumn":17},{"ruleId":"78","severity":1,"message":"86","line":57,"column":6,"nodeType":"80","endLine":57,"endColumn":8,"suggestions":"87"},{"ruleId":"78","severity":1,"message":"88","line":100,"column":6,"nodeType":"80","endLine":100,"endColumn":8,"suggestions":"89"},{"ruleId":"78","severity":1,"message":"90","line":142,"column":6,"nodeType":"80","endLine":142,"endColumn":24,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":614,"column":19,"nodeType":"94","messageId":"95","endLine":614,"endColumn":44},{"ruleId":"92","severity":1,"message":"93","line":803,"column":25,"nodeType":"94","messageId":"95","endLine":803,"endColumn":50},{"ruleId":"82","severity":1,"message":"96","line":11,"column":10,"nodeType":"84","messageId":"85","endLine":11,"endColumn":19},{"ruleId":"78","severity":1,"message":"79","line":18,"column":6,"nodeType":"80","endLine":18,"endColumn":8,"suggestions":"97"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'facade'. Either include it or remove the dependency array.","ArrayExpression",["98"],"no-unused-vars","'facade' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'isLoggedIn', 'setLoginStatus', and 'utils'. Either include them or remove the dependency array.",["99"],"React Hook useEffect has missing dependencies: 'facade', 'isLoggedIn', and 'semesterId'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has missing dependencies: 'facade' and 'semesterId'. Either include them or remove the dependency array.",["101"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'proxyData' is assigned a value but never used.",["102"],{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"103","fix":"111"},"Update the dependencies array to be: [facade]",{"range":"112","text":"113"},"Update the dependencies array to be: [isLoggedIn, setLoginStatus, utils]",{"range":"114","text":"115"},"Update the dependencies array to be: [facade, isLoggedIn, semesterId]",{"range":"116","text":"117"},"Update the dependencies array to be: [facade, oldQ, opdateList, semesterId]",{"range":"118","text":"119"},{"range":"120","text":"113"},[1180,1182],"[facade]",[1276,1278],"[isLoggedIn, setLoginStatus, utils]",[2791,2793],"[facade, isLoggedIn, semesterId]",[4164,4182],"[facade, oldQ, opdateList, semesterId]",[421,423]]